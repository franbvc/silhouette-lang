DIGIT = ( 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 ) ;
LETTER = ( a | ... | z | A | ... | Z ) ;

(*Keywords*)

TYPE = ( "Int" ) ;

(*Types*)
INTEGER = DIGIT, { DIGIT } ;

(*Variables*)  
IDENTIFIER = LETTER, { LETTER | DIGIT | "_" } ;

(*Program*)
BLOCK = "{", { STATEMENT }, "}" ;
STATEMENT = ( ( RELATIVE_EXPRESSION, ";" ) 
            | ( VARIABLE_DECLARATION, ";" ) 
            | ( VARIABLE_ASSIGNMENT, ";" ) 
            | ( IF ) 
            | ( FUNCTION_DECLARATION )
            | ( "result", "->", RELATIVE_EXPRESSION, ";" )
            | ( "->", RELATIVE_EXPRESSION, ";" )  
            ) ;

(*Variables*) 
VARIABLE_DECLARATION = "let", IDENTIFIER, ":", TYPE, ( "=", RELATIVE_EXPRESSION ) ;
VARIABLE_ASSIGNMENT = IDENTIFIER, "=", RELATIVE_EXPRESSION ;

(*Arithmetic*)
RELATIVE_EXPRESSION = ( RELATIVE_EXPRESSION, 
                        ( "=="
                        | "!="
                        | "<"
                        | ">"
                        | "<="
                        | ">=" 
                        ) 
                      ), 
                      EXPRESSION ;

EXPRESSION = ( EXPRESSION, ("+" | "-" | "||") ), TERM ;
TERM = ( TERM, ("*" | "/" | "&&") ), FACTOR ;
FACTOR = ( ("+" | "-" | "!"), FACTOR) 
         | INTEGER 
         | "(", RELATIVE_EXPRESSION, ")" 
         | IDENTIFIER 
         | "call", IDENTIFIER, "(", FUNCTION_CALL_ARGS, ")"
         | IDENTIFIER, "(", FUNCTION_CALL_ARGS, ")"
         ;

(*Conditional*)
IF = "if",  RELATIVE_EXPRESSION,  BLOCK, ( "ELSE", BLOCK ) ;

(*Functions*)
FUNCTION_DECLARATION = "fn", IDENTIFIER, FUNCTION_DECLARATION_ARGS, "=", BLOCK ;
FUNCTION_DECLARATION_ARGS = ( λ | IDENTIFIER, ":", TYPE, { ",", IDENTIFIER, ":", TYPE } );
FUNCTION_CALL_ARGS = ( λ | RELATIVE_EXPRESSION, { ",", RELATIVE_EXPRESSION } ) ;


